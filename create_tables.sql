-- Generated by Oracle SQL Developer Data Modeler 4.0.3.853
--   at:        2015-04-20 18:30:36 CDT
--   site:      Oracle Database 11g
--   type:      Oracle Database 11g


DROP TABLE Division CASCADE CONSTRAINTS ;

DROP TABLE Document CASCADE CONSTRAINTS ;

DROP TABLE Employee CASCADE CONSTRAINTS ;

DROP TABLE Lab CASCADE CONSTRAINTS ;

DROP TABLE List CASCADE CONSTRAINTS ;

DROP TABLE Member CASCADE CONSTRAINTS ;

CREATE TABLE Division
  (
    division_id VARCHAR2 (4) NOT NULL ,
    Lab_lab_id  VARCHAR2 (4) NOT NULL
  ) ;
ALTER TABLE Division ADD CONSTRAINT Division_PK PRIMARY KEY ( division_id, Lab_lab_id ) ;

CREATE TABLE Document
  (
    document_id        INTEGER NOT NULL ,
    attach_mimetype    VARCHAR2 (255) ,
    attach_filename    VARCHAR2 (255) ,
    attach_last_update DATE ,
    attach_charset     VARCHAR2 (128) ,
    attach_file BLOB ,
    Employee_employee_id INTEGER
  ) ;
ALTER TABLE Document ADD CONSTRAINT Document_PK PRIMARY KEY ( document_id ) ;

CREATE TABLE Employee
  (
    employee_id           INTEGER NOT NULL ,
    name                  VARCHAR2 (255) ,
    status                VARCHAR2 (1) ,
    lab                   VARCHAR2 (4) ,
    division              VARCHAR2 (4) ,
    status_effective_date DATE ,
    is_admin              CHAR (1)
  ) ;
ALTER TABLE Employee ADD CONSTRAINT Employee_PK PRIMARY KEY ( employee_id ) ;

CREATE TABLE Lab
  ( lab_id VARCHAR2 (4) NOT NULL
  ) ;
ALTER TABLE Lab ADD CONSTRAINT Lab_PK PRIMARY KEY ( lab_id ) ;

CREATE TABLE List
  (
    nl_id                 INTEGER NOT NULL ,
    name                  VARCHAR2 (255) NOT NULL ,
    description           VARCHAR2 (4000) NOT NULL ,
    external_name         VARCHAR2 (255) ,
    division_code         VARCHAR2 (4) ,
    status                VARCHAR2 (1) ,
    status_effective_date DATE
  ) ;
ALTER TABLE List ADD CONSTRAINT List_PK PRIMARY KEY ( nl_id ) ;

CREATE TABLE Member
  (
    list_member_Id       INTEGER NOT NULL ,
    Employee_employee_id INTEGER ,
    List_nl_id           INTEGER NOT NULL ,
    List_nl_id1          INTEGER
  ) ;
ALTER TABLE Member ADD CONSTRAINT Member_PK PRIMARY KEY ( list_member_Id ) ;

ALTER TABLE Division ADD CONSTRAINT Division_Lab_FK FOREIGN KEY ( Lab_lab_id ) REFERENCES Lab ( lab_id ) ;

ALTER TABLE Document ADD CONSTRAINT Document_Employee_FK FOREIGN KEY ( Employee_employee_id ) REFERENCES Employee ( employee_id ) ;

ALTER TABLE Member ADD CONSTRAINT Member_Employee_FK FOREIGN KEY ( Employee_employee_id ) REFERENCES Employee ( employee_id ) ;

ALTER TABLE Member ADD CONSTRAINT Member_List_FK FOREIGN KEY ( List_nl_id ) REFERENCES List ( nl_id ) ;

ALTER TABLE Member ADD CONSTRAINT Member_List_FKv1 FOREIGN KEY ( List_nl_id1 ) REFERENCES List ( nl_id ) ;


DROP SEQUENCE Document_seq ; 
create sequence Document_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger Document_PK_trig 
before insert on Document
for each row 
begin 
select Document_seq.nextval into :new.document_id from dual; 
end; 
/
alter table Document add created date ; 
alter table Document add created_by VARCHAR2 (255) ; 
alter table Document add row_version_number integer ; 
alter table Document add updated date ; 
alter table Document add updated_by VARCHAR2 (255) ; 
/
create or replace trigger Document_AUD_trig 
before insert or update on Document 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1;
    :new.employee_employee_id := nvl(wwv_flow.g_user,user);
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE List_seq ; 
create sequence List_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger List_PK_trig 
before insert on List
for each row 
begin 
select List_seq.nextval into :new.nl_id from dual; 
end; 
/
alter table List add created date ; 
alter table List add created_by VARCHAR2 (255) ; 
alter table List add row_version_number integer ; 
alter table List add updated date ; 
alter table List add updated_by VARCHAR2 (255) ; 
/
create or replace trigger List_AUD_trig 
before insert or update on List 
for each row 
declare div_var VARCHAR(4);
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
    :new.status_effective_date := localtimestamp; 
    if :new.status IS NULL then
      :new.status := 'A';
    end if;
    if :new.division_code IS NULL then
      select division into div_var from employee where employee_id = nvl(wwv_flow.g_user,user);
      :new.division_code := div_var;
    end if;
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
        if :new.status <> :old.status then
      :new.status_effective_date := localtimestamp; 
    end if;
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE Member_seq ; 
create sequence Member_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger Member_PK_trig 
before insert on Member
for each row 
begin 
select Member_seq.nextval into :new.list_member_Id from dual; 
end; 
/

DROP INDEX Lab_lab_id_FK_0 ;
CREATE INDEX Lab_lab_id_FK_0 ON Division(Lab_lab_id) ;
DROP INDEX Employee_employee_id_FK_1 ;
CREATE INDEX Employee_employee_id_FK_1 ON Document(Employee_employee_id) ;
DROP INDEX Employee_employee_id_FK_2 ;
CREATE INDEX Employee_employee_id_FK_2 ON Member(Employee_employee_id) ;
DROP INDEX List_nl_id_FK_3 ;
CREATE INDEX List_nl_id_FK_3 ON Member(List_nl_id) ;
DROP INDEX List_nl_id1_FK_4 ;
CREATE INDEX List_nl_id1_FK_4 ON Member(List_nl_id1) ;